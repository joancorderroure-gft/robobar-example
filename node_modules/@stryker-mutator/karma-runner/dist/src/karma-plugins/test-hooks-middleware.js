"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestHooksMiddleware = exports.TEST_HOOKS_FILE_NAME = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const url_1 = (0, tslib_1.__importDefault)(require("url"));
const core_1 = require("@stryker-mutator/api/core");
const util_1 = require("@stryker-mutator/util");
exports.TEST_HOOKS_FILE_NAME = require.resolve('./test-hooks-middleware-21f23d35-a4c9-4b01-aeff-da9c99c3ffc0');
const TEST_HOOKS_FILE_BASE_NAME = path_1.default.basename(exports.TEST_HOOKS_FILE_NAME);
const SUPPORTED_FRAMEWORKS = Object.freeze(['mocha', 'jasmine']);
function isSupportedFramework(framework) {
    return SUPPORTED_FRAMEWORKS.includes(framework);
}
/**
 * Keep in sync with StrykerMutantCoverageAdapter.ts
 */
const SHOULD_REPORT_COVERAGE_FLAG = '__strykerShouldReportCoverage__';
const { ACTIVE_MUTANT, NAMESPACE, CURRENT_TEST_ID, HIT_COUNT, HIT_LIMIT } = core_1.INSTRUMENTER_CONSTANTS;
class TestHooksMiddleware {
    constructor() {
        this.currentTestHooks = '';
        this.handler = (request, response, next) => {
            const pathName = url_1.default.parse(request.url).pathname;
            if (pathName === null || pathName === void 0 ? void 0 : pathName.endsWith(TEST_HOOKS_FILE_BASE_NAME)) {
                response.writeHead(200, {
                    'Cache-Control': 'no-cache',
                    'Content-Type': 'application/javascript',
                });
                response.end(this.currentTestHooks);
            }
            else {
                next();
            }
        };
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new TestHooksMiddleware();
        }
        return this._instance;
    }
    configureTestFramework(frameworks) {
        this.testFramework = frameworks === null || frameworks === void 0 ? void 0 : frameworks.filter(isSupportedFramework)[0];
    }
    configureCoverageAnalysis(coverageAnalysis) {
        switch (coverageAnalysis) {
            case 'perTest':
                this.configurePerTestCoverageAnalysis();
                break;
            case 'all':
                this.currentTestHooks = `window.${SHOULD_REPORT_COVERAGE_FLAG} = true;`;
                break;
            case 'off':
                this.currentTestHooks = `window.${SHOULD_REPORT_COVERAGE_FLAG} = false;`;
                break;
        }
    }
    configureMutantRun({ activeMutant, testFilter, hitLimit }) {
        this.configureCoverageAnalysis('off');
        this.currentTestHooks += `window.${NAMESPACE} = window.${NAMESPACE} || {};`;
        this.currentTestHooks += this.configureHitLimit(hitLimit);
        this.currentTestHooks += `window.${NAMESPACE}.${ACTIVE_MUTANT} = "${activeMutant.id}";`;
        if (testFilter) {
            switch (this.testFramework) {
                case 'jasmine':
                    this.currentTestHooks += `jasmine.getEnv().configure({ specFilter: function(spec) {
            return ${JSON.stringify(testFilter)}.indexOf(spec.id) !== -1;
          }})`;
                    break;
                case 'mocha':
                    const metaRegExp = testFilter.map((testId) => `(${(0, util_1.escapeRegExpLiteral)(testId)})`).join('|');
                    this.currentTestHooks += `mocha.grep(/${metaRegExp}/)`;
                    break;
                default:
            }
        }
    }
    configureHitLimit(hitLimit) {
        return `window.${NAMESPACE}.${HIT_COUNT} = ${hitLimit === undefined ? undefined : 0};
    window.${NAMESPACE}.${HIT_LIMIT} = ${hitLimit};`;
    }
    configurePerTestCoverageAnalysis() {
        switch (this.testFramework) {
            case 'jasmine':
                this.currentTestHooks = `
      window.${SHOULD_REPORT_COVERAGE_FLAG} = true;
      jasmine.getEnv().addReporter({
        specStarted: function (spec) {
          window.${NAMESPACE}.${CURRENT_TEST_ID} = spec.id;
        }
      });`;
                break;
            case 'mocha':
                this.currentTestHooks = `
        window.${SHOULD_REPORT_COVERAGE_FLAG} = true;
        beforeEach(function() {
          window.${NAMESPACE}.${CURRENT_TEST_ID} = this.currentTest && this.currentTest.fullTitle();
        });
      `;
                break;
            case undefined:
                throw new Error(`Could not configure coverageAnalysis "perTest". Your test framework is not supported by the \`@stryker-mutator/karma-runner\`. Supported test frameworks: ${SUPPORTED_FRAMEWORKS.join(', ')}.`);
        }
    }
}
exports.TestHooksMiddleware = TestHooksMiddleware;
//# sourceMappingURL=test-hooks-middleware.js.map