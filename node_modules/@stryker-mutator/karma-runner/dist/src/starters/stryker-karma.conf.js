"use strict";
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const util_1 = require("@stryker-mutator/util");
const stryker_reporter_1 = require("../karma-plugins/stryker-reporter");
const test_hooks_middleware_1 = require("../karma-plugins/test-hooks-middleware");
function setDefaultOptions(config) {
    config.set({
        browsers: ['ChromeHeadless'],
        frameworks: ['jasmine'],
    });
}
function setUserKarmaConfigFile(config, log) {
    if (globalSettings.karmaConfigFile) {
        const configFileName = path_1.default.resolve(globalSettings.karmaConfigFile);
        log.debug('Importing config from "%s"', configFileName);
        try {
            const userConfig = (0, util_1.requireResolve)(configFileName);
            if (typeof userConfig !== 'function') {
                throw new TypeError(`Karma config file "${configFileName}" should export a function! Found: ${typeof userConfig}`);
            }
            userConfig(config);
            config.configFile = configFileName; // override config to ensure karma is as user-like as possible
        }
        catch (error) {
            if (error.code === 'MODULE_NOT_FOUND') {
                log.error(`Unable to find karma config at "${globalSettings.karmaConfigFile}" (tried to load from ${configFileName}). Please check your stryker config. You might need to make sure the file is included in the sandbox directory.`);
            }
            else {
                throw error; // oops
            }
        }
    }
}
/**
 * Sets configuration that is needed to control the karma life cycle. Namely it shouldn't watch files and not quit after first test run.
 * @param config The config to use
 */
function setLifeCycleOptions(config) {
    config.set({
        // No auto watch, stryker will inform us when we need to test
        autoWatch: false,
        // Override browserNoActivityTimeout. Default value 10000 might not enough to send perTest coverage results
        browserNoActivityTimeout: 1000000,
        // Never detach, always run in this same process (is already a separate process)
        detached: false,
        // Don't stop after first run
        singleRun: false,
    });
}
/**
 * Sets configuration that is needed to control client scripts in karma.
 * @param config The config to use
 * @see https://github.com/stryker-mutator/stryker-js/issues/2049
 */
function setClientOptions(config) {
    var _a, _b;
    // Disable clearContext because of issue #2049 (race condition in Karma)
    // Enabling clearContext (default true) will load "about:blank" in the iFrame after a test run.
    // As far as I can see clearing the context only has a visible effect (you don't see the result of the last test).
    // If this is true, disabling it is safe to do and solves the race condition issue.
    const clientOptions = { clearContext: false };
    // Disable randomized tests with using jasmine. Stryker doesn't play nice with a random test order, since spec id's tent to move around
    // Also set failFast, so that we're not waiting on more than 1 failed test
    if ((_a = config.frameworks) === null || _a === void 0 ? void 0 : _a.includes('jasmine')) {
        clientOptions.jasmine = {
            random: false,
            failFast: !globalSettings.disableBail,
        };
    }
    if ((_b = config.frameworks) === null || _b === void 0 ? void 0 : _b.includes('mocha')) {
        clientOptions.mocha = { bail: !globalSettings.disableBail };
    }
    config.set({ client: clientOptions });
}
function setUserKarmaConfig(config) {
    if (globalSettings.karmaConfig) {
        config.set(globalSettings.karmaConfig);
    }
}
function setBasePath(config) {
    if (!config.basePath) {
        // We need to set the base path, so karma won't use this file to base everything of
        if (globalSettings.karmaConfigFile) {
            config.basePath = path_1.default.resolve(path_1.default.dirname(globalSettings.karmaConfigFile));
        }
        else {
            config.basePath = process.cwd();
        }
    }
}
function addPlugin(karmaConfig, karmaPlugin) {
    var _a;
    karmaConfig.plugins = (_a = karmaConfig.plugins) !== null && _a !== void 0 ? _a : ['karma-*'];
    karmaConfig.plugins.push(karmaPlugin);
}
/**
 * Configures the test hooks middleware.
 * It adds a non-existing file to the top `files` array.
 * Further more it configures a middleware that serves the file.
 */
function configureTestHooksMiddleware(config) {
    var _a, _b;
    // Add test run middleware file
    config.files = (_a = config.files) !== null && _a !== void 0 ? _a : [];
    config.files.unshift({ pattern: test_hooks_middleware_1.TEST_HOOKS_FILE_NAME, included: true, watched: false, served: false, nocache: true }); // Add a custom hooks file to provide hooks
    const middleware = (_b = config.beforeMiddleware) !== null && _b !== void 0 ? _b : (config.beforeMiddleware = []);
    middleware.unshift(test_hooks_middleware_1.TestHooksMiddleware.name);
    test_hooks_middleware_1.TestHooksMiddleware.instance.configureTestFramework(config.frameworks);
    addPlugin(config, { [`middleware:${test_hooks_middleware_1.TestHooksMiddleware.name}`]: ['value', test_hooks_middleware_1.TestHooksMiddleware.instance.handler] });
}
function configureStrykerMutantCoverageAdapter(config) {
    var _a;
    config.files = (_a = config.files) !== null && _a !== void 0 ? _a : [];
    config.files.unshift({
        pattern: require.resolve('../karma-plugins/stryker-mutant-coverage-adapter'),
        included: true,
        watched: false,
        served: true,
        nocache: true,
    });
}
function configureStrykerReporter(config) {
    addPlugin(config, { [`reporter:${stryker_reporter_1.StrykerReporter.name}`]: ['factory', stryker_reporter_1.strykerReporterFactory] });
    if (!config.reporters) {
        config.reporters = [];
    }
    config.reporters.push(stryker_reporter_1.StrykerReporter.name);
}
const globalSettings = {
    getLogger() {
        return util_1.noopLogger;
    },
    disableBail: false,
};
function configureKarma(config) {
    const log = globalSettings.getLogger(path_1.default.basename(__filename));
    setDefaultOptions(config);
    setUserKarmaConfigFile(config, log);
    setUserKarmaConfig(config);
    setBasePath(config);
    setLifeCycleOptions(config);
    setClientOptions(config);
    configureTestHooksMiddleware(config);
    configureStrykerMutantCoverageAdapter(config);
    configureStrykerReporter(config);
}
/**
 * Provide global settings for next configuration
 * This is the only way we can pass through any values between the `KarmaTestRunner` and the stryker-karma.conf file.
 * (not counting environment variables)
 */
configureKarma.setGlobals = (globals) => {
    var _a, _b;
    globalSettings.karmaConfig = globals.karmaConfig;
    globalSettings.karmaConfigFile = globals.karmaConfigFile;
    globalSettings.getLogger = (_a = globals.getLogger) !== null && _a !== void 0 ? _a : (() => util_1.noopLogger);
    globalSettings.disableBail = (_b = globals.disableBail) !== null && _b !== void 0 ? _b : false;
};
module.exports = configureKarma;
//# sourceMappingURL=stryker-karma.conf.js.map